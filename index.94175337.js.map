{"mappings":"ACGA,MAAM,EAAO,ICDb,MACE,YAAY,EAAe,IAAI,CAAE,CAC/B,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,YAAY,CAAG,EAEpB,IAAI,CAAC,KAAK,CAAG,EACT,IAAI,CAAC,SAAS,CAAC,GACf,IAAI,CAAC,kBAAkB,EAC7B,CAEA,oBAAqB,CACnB,OAAO,MAAM,IAAI,CAAC,IAAI,EACnB,IAAI,CAAC,MACL,GAAG,CAAC,IAAM,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GACrC,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,gBAAiB,CACf,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IACJ,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,GAAM,CAAC,EAAK,EAAI,CACd,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CACF,CAEA,MAAM,CAAG,CAAE,CACT,IAAM,EAAS,EAAI,MAAM,CAAC,AAAC,GAAQ,GAEnC,KAAO,EAAO,MAAM,CAAG,IAAI,CAAC,IAAI,EAC9B,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,QAAQ,CAAG,CAAE,CACX,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAG,EAAG,IAC9B,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,EAAI,AAAW,IAAX,CAAG,CAAC,EAAE,GACjC,CAAG,CAAC,EAAE,EAAI,EACV,CAAG,CAAC,EAAI,EAAE,CAAG,EACb,IAAI,CAAC,KAAK,EAAI,CAAG,CAAC,EAAE,EAIxB,OAAO,CACT,CAEA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAI,EAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAErC,EAAS,IAAI,CAAC,OAAO,CAAC,GACtB,EAAS,IAAI,CAAC,KAAK,CAAC,GAEhB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,KAAO,EAAO,QAAQ,IAC9C,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,CAClB,CAEI,GACF,IAAI,CAAC,QAAQ,EAEjB,CAEA,WAAY,CACV,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAM,EAAc,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAClC,EAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,OAAO,IAErD,EAAS,IAAI,CAAC,OAAO,CAAC,GACtB,EAAS,IAAI,CAAC,KAAK,CAAC,GAAQ,OAAO,GAE/B,EAAY,QAAQ,KAAO,EAAO,QAAQ,IAC5C,CAAA,EAAQ,CAAA,CADV,EAIA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,CAClB,CAEI,GACF,IAAI,CAAC,QAAQ,EAEjB,CAEA,QAAS,CACP,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAM,EAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAE,EACtC,EAAS,IAAI,CAAC,KAAK,CAAC,GAExB,EAAS,IAAI,CAAC,OAAO,CAAC,GACtB,EAAS,IAAI,CAAC,KAAK,CAAC,GAEhB,EAAI,QAAQ,KAAO,EAAO,QAAQ,IACpC,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,AAEhC,CAEI,GACF,IAAI,CAAC,QAAQ,EAEjB,CAEA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAAK,CAClC,IAAM,EAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAE,EACtC,EAAS,IAAI,CAAC,KAAK,CAAC,EAAI,KAAK,GAAG,OAAO,IAE3C,EAAS,IAAI,CAAC,OAAO,CAAC,GACtB,EAAS,IAAI,CAAC,KAAK,CAAC,GAAQ,OAAO,GAE/B,EAAI,QAAQ,KAAO,EAAO,QAAQ,IACpC,CAAA,EAAQ,CAAA,CADV,EAIA,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,AAEhC,CAEI,GACF,IAAI,CAAC,QAAQ,EAEjB,CAEA,UAAW,CACT,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,eAAe,EACtB,CAEA,iBAAkB,CAChB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAI,AAAqB,OAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAW,CAC7B,IAAI,CAAC,MAAM,CAAG,MAEd,MACF,CAIJ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAE,IAC7B,GAAyB,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAIhB,IAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAIhE,IAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAPlE,MAYN,CAAA,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,OAAQ,CACc,SAAhB,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,MAAM,CAAG,UAElB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAC1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAChC,IAAI,CAAC,kBAAkB,GAC3B,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,UAAU,CAAK,CAAE,CACf,OAAO,EAAM,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACpC,CACF,EDvOA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAErC,EAAW,KACf,EAAa,WAAW,CAAG,EAAK,QAAQ,GAExC,IAAM,EAAQ,EAAK,QAAQ,GAE3B,EAAU,gBAAgB,CAAC,cAAc,OAAO,CAAC,CAAC,EAAK,KACrD,EAAI,gBAAgB,CAAC,eAAe,OAAO,CAAC,CAAC,EAAM,KACjD,EAAK,SAAS,CAAG,aAEb,AAA0B,IAA1B,CAAK,CAAC,EAAO,CAAC,EAAO,EACvB,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,CAAK,CAAC,EAAO,CAAC,EAAO,CAAC,CAAC,EACzD,EAAK,WAAW,CAAG,CAAK,CAAC,EAAO,CAAC,EAAO,EAExC,EAAK,WAAW,CAAG,EAEvB,EACF,GAEI,AAAqB,QAArB,EAAK,SAAS,GAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UACnB,AAAqB,SAArB,EAAK,SAAS,GACvB,EAAY,SAAS,CAAC,MAAM,CAAC,WAE7B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAY,SAAS,CAAC,GAAG,CAAC,UAE9B,EAEM,EAAY,KAChB,EAAK,KAAK,GACV,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,GACF,EAEM,EAAc,KAClB,EAAK,OAAO,GACZ,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAY,WAAW,CAAG,QAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,WAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,SAC1B,GACF,EAEA,EAAY,gBAAgB,CAAC,QAAS,KACpC,IAAM,EAAa,EAAY,WAAW,AAEtC,AAAe,CAAA,UAAf,EACF,IACwB,YAAf,GACT,GAEJ,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAAkB,CAClC,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,EAEjB,CACA,GACF,CACF,GAEA,GACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState;\n        this.board = initialState ? this.copyState(initialState) : this.generateEmptyBoard();\n    }\n    generateEmptyBoard() {\n        return Array(this.size).fill(null).map(()=>Array(this.size).fill(0));\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    initializeGame() {\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let r = 0; r < this.size; r++){\n            for(let c = 0; c < this.size; c++)if (this.board[r][c] === 0) emptyCells.push([\n                r,\n                c\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    slide(row) {\n        const newRow = row.filter((val)=>val);\n        while(newRow.length < this.size)newRow.push(0);\n        return newRow;\n    }\n    combine(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i] !== 0) {\n            row[i] *= 2;\n            row[i + 1] = 0;\n            this.score += row[i];\n        }\n        return row;\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let r = 0; r < this.size; r++){\n            let newRow = this.slide(this.board[r]);\n            newRow = this.combine(newRow);\n            newRow = this.slide(newRow);\n            if (this.board[r].toString() !== newRow.toString()) moved = true;\n            this.board[r] = newRow;\n        }\n        if (moved) this.postMove();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let r = 0; r < this.size; r++){\n            const originalRow = [\n                ...this.board[r]\n            ];\n            let newRow = this.slide(this.board[r].slice().reverse());\n            newRow = this.combine(newRow);\n            newRow = this.slide(newRow).reverse();\n            if (originalRow.toString() !== newRow.toString()) moved = true;\n            this.board[r] = newRow;\n        }\n        if (moved) this.postMove();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let c = 0; c < this.size; c++){\n            const col = this.board.map((row)=>row[c]);\n            let newCol = this.slide(col);\n            newCol = this.combine(newCol);\n            newCol = this.slide(newCol);\n            if (col.toString() !== newCol.toString()) moved = true;\n            for(let r = 0; r < this.size; r++)this.board[r][c] = newCol[r];\n        }\n        if (moved) this.postMove();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let c = 0; c < this.size; c++){\n            const col = this.board.map((row)=>row[c]);\n            let newCol = this.slide(col.slice().reverse());\n            newCol = this.combine(newCol);\n            newCol = this.slide(newCol).reverse();\n            if (col.toString() !== newCol.toString()) moved = true;\n            for(let r = 0; r < this.size; r++)this.board[r][c] = newCol[r];\n        }\n        if (moved) this.postMove();\n    }\n    postMove() {\n        this.addRandomTile();\n        this.checkGameStatus();\n    }\n    checkGameStatus() {\n        for(let r = 0; r < this.size; r++){\n            for(let c = 0; c < this.size; c++)if (this.board[r][c] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++){\n            if (this.board[r][c] === 0) return;\n            if (c !== this.size - 1 && this.board[r][c] === this.board[r][c + 1]) return;\n            if (r !== this.size - 1 && this.board[r][c] === this.board[r + 1][c]) return;\n        }\n        this.status = \"lose\";\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.initializeGame();\n            this.status = \"playing\";\n        }\n    }\n    restart() {\n        this.board = this.initialState ? this.copyState(this.initialState) : this.generateEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    copyState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const startButton = document.querySelector(\".button.start\");\n    const gameField = document.querySelector(\".game-field\");\n    const scoreElement = document.querySelector(\".game-score\");\n    const startMessage = document.querySelector(\".message-start\");\n    const winMessage = document.querySelector(\".message-win\");\n    const loseMessage = document.querySelector(\".message-lose\");\n    const updateUI = ()=>{\n        scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n        const state = $09e991522ca7e64e$var$game.getState();\n        gameField.querySelectorAll(\".field-row\").forEach((row, rIndex)=>{\n            row.querySelectorAll(\".field-cell\").forEach((cell, cIndex)=>{\n                cell.className = \"field-cell\";\n                if (state[rIndex][cIndex] !== 0) {\n                    cell.classList.add(`field-cell--${state[rIndex][cIndex]}`);\n                    cell.textContent = state[rIndex][cIndex];\n                } else cell.textContent = \"\";\n            });\n        });\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") winMessage.classList.remove(\"hidden\");\n        else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") loseMessage.classList.remove(\"hidden\");\n        else {\n            winMessage.classList.add(\"hidden\");\n            loseMessage.classList.add(\"hidden\");\n        }\n    };\n    const startGame = ()=>{\n        $09e991522ca7e64e$var$game.start();\n        startMessage.classList.add(\"hidden\");\n        startButton.textContent = \"Restart\";\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        updateUI();\n    };\n    const restartGame = ()=>{\n        $09e991522ca7e64e$var$game.restart();\n        startMessage.classList.remove(\"hidden\");\n        startButton.textContent = \"Start\";\n        startButton.classList.remove(\"restart\");\n        startButton.classList.add(\"start\");\n        updateUI();\n    };\n    startButton.addEventListener(\"click\", ()=>{\n        const buttonText = startButton.textContent;\n        if (buttonText === \"Start\") startGame();\n        else if (buttonText === \"Restart\") restartGame();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n            switch(e.key){\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n            }\n            updateUI();\n        }\n    });\n    updateUI();\n});\n\n\n//# sourceMappingURL=index.94175337.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.querySelector('.button.start');\n  const gameField = document.querySelector('.game-field');\n  const scoreElement = document.querySelector('.game-score');\n  const startMessage = document.querySelector('.message-start');\n  const winMessage = document.querySelector('.message-win');\n  const loseMessage = document.querySelector('.message-lose');\n\n  const updateUI = () => {\n    scoreElement.textContent = game.getScore();\n\n    const state = game.getState();\n\n    gameField.querySelectorAll('.field-row').forEach((row, rIndex) => {\n      row.querySelectorAll('.field-cell').forEach((cell, cIndex) => {\n        cell.className = 'field-cell';\n\n        if (state[rIndex][cIndex] !== 0) {\n          cell.classList.add(`field-cell--${state[rIndex][cIndex]}`);\n          cell.textContent = state[rIndex][cIndex];\n        } else {\n          cell.textContent = '';\n        }\n      });\n    });\n\n    if (game.getStatus() === 'win') {\n      winMessage.classList.remove('hidden');\n    } else if (game.getStatus() === 'lose') {\n      loseMessage.classList.remove('hidden');\n    } else {\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n    }\n  };\n\n  const startGame = () => {\n    game.start();\n    startMessage.classList.add('hidden');\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    updateUI();\n  };\n\n  const restartGame = () => {\n    game.restart();\n    startMessage.classList.remove('hidden');\n    startButton.textContent = 'Start';\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    updateUI();\n  };\n\n  startButton.addEventListener('click', () => {\n    const buttonText = startButton.textContent;\n\n    if (buttonText === 'Start') {\n      startGame();\n    } else if (buttonText === 'Restart') {\n      restartGame();\n    }\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() === 'playing') {\n      switch (e.key) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n      }\n      updateUI();\n    }\n  });\n\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n\n    this.board = initialState\n      ? this.copyState(initialState)\n      : this.generateEmptyBoard();\n  }\n\n  generateEmptyBoard() {\n    return Array(this.size)\n      .fill(null)\n      .map(() => Array(this.size).fill(0));\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  initializeGame() {\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  slide(row) {\n    const newRow = row.filter((val) => val);\n\n    while (newRow.length < this.size) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  combine(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1] && row[i] !== 0) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n\n    return row;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      let newRow = this.slide(this.board[r]);\n\n      newRow = this.combine(newRow);\n      newRow = this.slide(newRow);\n\n      if (this.board[r].toString() !== newRow.toString()) {\n        moved = true;\n      }\n      this.board[r] = newRow;\n    }\n\n    if (moved) {\n      this.postMove();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let r = 0; r < this.size; r++) {\n      const originalRow = [...this.board[r]];\n      let newRow = this.slide(this.board[r].slice().reverse());\n\n      newRow = this.combine(newRow);\n      newRow = this.slide(newRow).reverse();\n\n      if (originalRow.toString() !== newRow.toString()) {\n        moved = true;\n      }\n\n      this.board[r] = newRow;\n    }\n\n    if (moved) {\n      this.postMove();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      const col = this.board.map((row) => row[c]);\n      let newCol = this.slide(col);\n\n      newCol = this.combine(newCol);\n      newCol = this.slide(newCol);\n\n      if (col.toString() !== newCol.toString()) {\n        moved = true;\n      }\n\n      for (let r = 0; r < this.size; r++) {\n        this.board[r][c] = newCol[r];\n      }\n    }\n\n    if (moved) {\n      this.postMove();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let c = 0; c < this.size; c++) {\n      const col = this.board.map((row) => row[c]);\n      let newCol = this.slide(col.slice().reverse());\n\n      newCol = this.combine(newCol);\n      newCol = this.slide(newCol).reverse();\n\n      if (col.toString() !== newCol.toString()) {\n        moved = true;\n      }\n\n      for (let r = 0; r < this.size; r++) {\n        this.board[r][c] = newCol[r];\n      }\n    }\n\n    if (moved) {\n      this.postMove();\n    }\n  }\n\n  postMove() {\n    this.addRandomTile();\n    this.checkGameStatus();\n  }\n\n  checkGameStatus() {\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          return;\n        }\n\n        if (c !== this.size - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return;\n        }\n\n        if (r !== this.size - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return;\n        }\n      }\n    }\n    this.status = 'lose';\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.initializeGame();\n      this.status = 'playing';\n    }\n  }\n\n  restart() {\n    this.board = this.initialState\n      ? this.copyState(this.initialState)\n      : this.generateEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  copyState(state) {\n    return state.map((row) => [...row]);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","copyState","generateEmptyBoard","Array","fill","map","getState","getScore","getStatus","initializeGame","addRandomTile","emptyCells","r","c","push","length","row","col","Math","floor","random","slide","newRow","filter","val","combine","i","moveLeft","moved","toString","postMove","moveRight","originalRow","slice","reverse","moveUp","newCol","moveDown","checkGameStatus","start","restart","state","document","addEventListener","startButton","querySelector","gameField","scoreElement","startMessage","winMessage","loseMessage","updateUI","textContent","querySelectorAll","forEach","rIndex","cell","cIndex","className","classList","add","remove","startGame","restartGame","buttonText","e","key"],"version":3,"file":"index.94175337.js.map"}